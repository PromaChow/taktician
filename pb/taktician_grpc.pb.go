// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: tak/proto/taktician.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TakticianClient is the client API for Taktician service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TakticianClient interface {
	Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error)
	Canonicalize(ctx context.Context, in *CanonicalizeRequest, opts ...grpc.CallOption) (*CanonicalizeResponse, error)
	IsPositionInTak(ctx context.Context, in *IsPositionInTakRequest, opts ...grpc.CallOption) (*IsPositionInTakResponse, error)
}

type takticianClient struct {
	cc grpc.ClientConnInterface
}

func NewTakticianClient(cc grpc.ClientConnInterface) TakticianClient {
	return &takticianClient{cc}
}

func (c *takticianClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := c.cc.Invoke(ctx, "/tak.proto.Taktician/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *takticianClient) Canonicalize(ctx context.Context, in *CanonicalizeRequest, opts ...grpc.CallOption) (*CanonicalizeResponse, error) {
	out := new(CanonicalizeResponse)
	err := c.cc.Invoke(ctx, "/tak.proto.Taktician/Canonicalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *takticianClient) IsPositionInTak(ctx context.Context, in *IsPositionInTakRequest, opts ...grpc.CallOption) (*IsPositionInTakResponse, error) {
	out := new(IsPositionInTakResponse)
	err := c.cc.Invoke(ctx, "/tak.proto.Taktician/IsPositionInTak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TakticianServer is the server API for Taktician service.
// All implementations must embed UnimplementedTakticianServer
// for forward compatibility
type TakticianServer interface {
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error)
	Canonicalize(context.Context, *CanonicalizeRequest) (*CanonicalizeResponse, error)
	IsPositionInTak(context.Context, *IsPositionInTakRequest) (*IsPositionInTakResponse, error)
	mustEmbedUnimplementedTakticianServer()
}

// UnimplementedTakticianServer must be embedded to have forward compatible implementations.
type UnimplementedTakticianServer struct {
}

func (UnimplementedTakticianServer) Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedTakticianServer) Canonicalize(context.Context, *CanonicalizeRequest) (*CanonicalizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Canonicalize not implemented")
}
func (UnimplementedTakticianServer) IsPositionInTak(context.Context, *IsPositionInTakRequest) (*IsPositionInTakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPositionInTak not implemented")
}
func (UnimplementedTakticianServer) mustEmbedUnimplementedTakticianServer() {}

// UnsafeTakticianServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TakticianServer will
// result in compilation errors.
type UnsafeTakticianServer interface {
	mustEmbedUnimplementedTakticianServer()
}

func RegisterTakticianServer(s grpc.ServiceRegistrar, srv TakticianServer) {
	s.RegisterService(&Taktician_ServiceDesc, srv)
}

func _Taktician_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TakticianServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tak.proto.Taktician/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TakticianServer).Analyze(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taktician_Canonicalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanonicalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TakticianServer).Canonicalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tak.proto.Taktician/Canonicalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TakticianServer).Canonicalize(ctx, req.(*CanonicalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taktician_IsPositionInTak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPositionInTakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TakticianServer).IsPositionInTak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tak.proto.Taktician/IsPositionInTak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TakticianServer).IsPositionInTak(ctx, req.(*IsPositionInTakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Taktician_ServiceDesc is the grpc.ServiceDesc for Taktician service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Taktician_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tak.proto.Taktician",
	HandlerType: (*TakticianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _Taktician_Analyze_Handler,
		},
		{
			MethodName: "Canonicalize",
			Handler:    _Taktician_Canonicalize_Handler,
		},
		{
			MethodName: "IsPositionInTak",
			Handler:    _Taktician_IsPositionInTak_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tak/proto/taktician.proto",
}
