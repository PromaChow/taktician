# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from tak.proto import taktician_pb2 as tak_dot_proto_dot_taktician__pb2


class TakticianStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Analyze = channel.unary_unary(
                '/tak.proto.Taktician/Analyze',
                request_serializer=tak_dot_proto_dot_taktician__pb2.AnalyzeRequest.SerializeToString,
                response_deserializer=tak_dot_proto_dot_taktician__pb2.AnalyzeResponse.FromString,
                )
        self.Canonicalize = channel.unary_unary(
                '/tak.proto.Taktician/Canonicalize',
                request_serializer=tak_dot_proto_dot_taktician__pb2.CanonicalizeRequest.SerializeToString,
                response_deserializer=tak_dot_proto_dot_taktician__pb2.CanonicalizeResponse.FromString,
                )
        self.IsPositionInTak = channel.unary_unary(
                '/tak.proto.Taktician/IsPositionInTak',
                request_serializer=tak_dot_proto_dot_taktician__pb2.IsPositionInTakRequest.SerializeToString,
                response_deserializer=tak_dot_proto_dot_taktician__pb2.IsPositionInTakResponse.FromString,
                )


class TakticianServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Analyze(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Canonicalize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsPositionInTak(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TakticianServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Analyze': grpc.unary_unary_rpc_method_handler(
                    servicer.Analyze,
                    request_deserializer=tak_dot_proto_dot_taktician__pb2.AnalyzeRequest.FromString,
                    response_serializer=tak_dot_proto_dot_taktician__pb2.AnalyzeResponse.SerializeToString,
            ),
            'Canonicalize': grpc.unary_unary_rpc_method_handler(
                    servicer.Canonicalize,
                    request_deserializer=tak_dot_proto_dot_taktician__pb2.CanonicalizeRequest.FromString,
                    response_serializer=tak_dot_proto_dot_taktician__pb2.CanonicalizeResponse.SerializeToString,
            ),
            'IsPositionInTak': grpc.unary_unary_rpc_method_handler(
                    servicer.IsPositionInTak,
                    request_deserializer=tak_dot_proto_dot_taktician__pb2.IsPositionInTakRequest.FromString,
                    response_serializer=tak_dot_proto_dot_taktician__pb2.IsPositionInTakResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tak.proto.Taktician', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Taktician(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Analyze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tak.proto.Taktician/Analyze',
            tak_dot_proto_dot_taktician__pb2.AnalyzeRequest.SerializeToString,
            tak_dot_proto_dot_taktician__pb2.AnalyzeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Canonicalize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tak.proto.Taktician/Canonicalize',
            tak_dot_proto_dot_taktician__pb2.CanonicalizeRequest.SerializeToString,
            tak_dot_proto_dot_taktician__pb2.CanonicalizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsPositionInTak(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tak.proto.Taktician/IsPositionInTak',
            tak_dot_proto_dot_taktician__pb2.IsPositionInTakRequest.SerializeToString,
            tak_dot_proto_dot_taktician__pb2.IsPositionInTakResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
