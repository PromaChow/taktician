#!/usr/bin/env python
import argparse
import os.path
import subprocess
import time
import shlex

SCRIPTS = os.path.dirname(__file__)
ROOT = os.path.realpath(os.path.join(SCRIPTS, "../../"))


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("--model1", required=True)
    parser.add_argument("--model2", required=True)

    parser.add_argument("--port1", default=50_001, type=int)
    parser.add_argument("--port2", default=50_002, type=int)

    parser.add_argument("--sims1", default=25, type=int)
    parser.add_argument("--sims2", default=25, type=int)

    parser.add_argument("--c1", default=None, type=float)
    parser.add_argument("--c2", default=None, type=float)

    parser.add_argument("--size", type=int, default=3)
    parser.add_argument("--openings", type=str)
    parser.add_argument("--games", type=int, default=1)
    parser.add_argument("--threads", type=int, default=os.cpu_count())

    parser.add_argument("--debug", type=int, default=0)

    parser.add_argument("--device", type=str, default="cpu")
    parser.add_argument("--fp16", type=bool, default=None)

    args = parser.parse_args()

    server_args = [
        os.path.join(SCRIPTS, "analysis_server"),
        f"--device={args.device}",
    ]
    if args.fp16 or args.fp16 is None and args.device.startswith("cuda"):
        server_args += "--fp16"

    p1 = subprocess.Popen(
        server_args
        + [
            "--port",
            str(args.port1),
            args.model1,
        ],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    p2 = subprocess.Popen(
        server_args
        + [
            "--port",
            str(args.port2),
            args.model2,
        ],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    try:
        print(f"Waiting on model servers...")
        time.sleep(2)
        if p1.poll() or p2.poll():
            raise ValueError("Server process crashed!")

        tei_cmd = [os.path.join(SCRIPTS, "tei"), "--time-limit=0", "--host=localhost"]
        p1_cmd = tei_cmd + [f"--port={args.port1}"]
        p2_cmd = tei_cmd + [f"--port={args.port2}"]
        if args.sims1:
            p1_cmd += [f"--simulation-limit={args.sims1}"]
        if args.c1:
            p1_cmd += [f"--c={args.c1}"]
        if args.sims2:
            p2_cmd += [f"--simulation-limit={args.sims2}"]
        if args.c2:
            p2_cmd += [f"--c={args.c2}"]

        cmdline = [
            "taktician",
            "selfplay",
            f"-size={args.size}",
            f"-games={args.games}",
            f"-threads={str(args.threads)}",
            f"-debug={args.debug}",
            "-p1",
            shlex.join(p1_cmd),
            "-p2",
            shlex.join(p2_cmd),
        ] + ([f"-openings={args.openings}"] if args.openings else [])

        print(f"+ {shlex.join(cmdline)}")
        subprocess.check_call(cmdline)
    finally:
        p1.kill()
        p2.kill()


if __name__ == "__main__":
    main()


# time taktician selfplay -games 4 -threads 24
# -p1 "$(pwd)/python/scripts/tei --host=localhost --time-limit 0 --simulation-limit 25 --port=5001"
# -p2 "$(pwd)/python/scripts/tei --host=localhost -c=4 --time-limit 0 --simulation-limit 25 --port=5002"
# -size 3 -debug 0 -limit 10s -openings data/3x3-openings.3
