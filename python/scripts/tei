#!/usr/bin/env python
import tak
from tak import mcts, ptn

import optparse
import sys


class Action:
    pass


class Quit(Action):
    pass


class Server:
    config: mcts.Config
    engine: mcts.MCTS
    pos: tak.Position
    size: int

    def __init__(self, config: mcts.Config):
        self.config = config

    def parse_position(self, words):
        pos = None
        cmd = words[0]
        if cmd == "startpos":
            words = words[1:]
            pos = tak.Position(tak.Config(size=self.size))
        elif cmd == "tps":
            if len(words) < 4:
                raise ValueError("position tps: not enough words")
            pos = ptn.parse_tps(" ".join(words[1:4]))
            words = words[4:]
        else:
            raise ValueError(f"Unknown initial position: {cmd}")
        if len(words) == 0:
            return pos
        if words[0] != "moves":
            raise ValueError(f"expected 'moves', got {words[0]}")
        for w in words[1:]:
            move = ptn.parse_move(w)
            pos = pos.move(move)
        return pos

    def analyze(self, words):
        # todo: parse time controls I guess
        tree = self.engine.analyze(self.pos)
        move = self.engine.select_root_move(tree)
        yield f"bestmove {ptn.format_move(move)}"

    def receive(self, line: str):
        line = line.strip()
        cmd, *words = line.split(" ")
        if cmd == "tei":
            yield "id name Strategician"
            yield "id author Nelson Elhage"
            yield "teiok"
        elif cmd == "quit":
            yield Quit()
        elif cmd == "teinewgame":
            size = int(words[0])
            self.size = size
            self.engine = mcts.MCTS(self.config)
        elif cmd == "position":
            self.pos = self.parse_position(words)
        elif cmd == "go":
            yield from self.analyze(words)
        elif cmd == "stop":
            pass
        elif cmd == "isready":
            yield "readyok"
        else:
            raise ValueError(f"Unknown command: {cmd}")


def parse_args():
    parser = optparse.OptionParser()
    parser.add_option(
        "--time-limit",
        "-t",
        dest="time_limit",
        type="float",
        help="MCTS time limit in seconds",
        metavar="SECONDS",
    )
    parser.add_option(
        "--simulation-limit",
        "-l",
        dest="simulation_limit",
        type="int",
        metavar="POSITIONS",
    )
    parser.add_option(
        "--debug",
        "-d",
        dest="debug",
        action="store_true",
    )
    parser.add_option("-c", "--mcts.c", dest="C", type="float")

    return parser.parse_args()


def main():
    (options, args) = parse_args()
    config = mcts.Config()

    if options.C is not None:
        config.C = options.C
    if options.time_limit is not None:
        config.time_limit = options.time_limit
    if options.simulation_limit is not None:
        config.simulation_limit = options.simulation_limit

    srv = Server(config)
    while True:
        line = sys.stdin.readline()
        if options.debug:
            print(f"[TEI] recv: {line!r}", file=sys.stderr)
        for cmd in srv.receive(line):
            if isinstance(cmd, str):
                if options.debug:
                    print(f"[TEI] send: {cmd!r}", file=sys.stderr)
                sys.stdout.write(cmd + "\n")
                sys.stdout.flush()
            elif isinstance(cmd, Quit):
                return
            else:
                raise ValueError(f"Internal error: got {cmd!r}")


if __name__ == "__main__":
    main()
