#!/usr/bin/env python
import sys
import logging

from xformer import loading

from tak.proto import analysis_pb2_grpc
from tak.proto import analysis_pb2
import tak.model.server
import argparse

import numpy as np
import torch
from torch import nn

from attrs import define, field

import grpc
import asyncio
import time

import typing as T


_cleanup_coroutines = []


async def main(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--fp16",
        action="store_true",
        default=None,
        help="Run model in float16",
    )
    parser.add_argument(
        "--no-fp16",
        action="store_false",
        dest="fp16",
    )
    parser.add_argument(
        "--no-script",
        action="store_false",
        dest="script",
        default=True,
    )
    parser.add_argument(
        "--device",
        type=str,
        default="cuda" if torch.cuda.is_available() else "cpu",
    )
    parser.add_argument(
        "--host",
        type=str,
        default="localhost",
    )
    parser.add_argument(
        "--port",
        type=int,
        default=5001,
    )
    parser.add_argument(
        "model",
        type=str,
    )

    args = parser.parse_args(argv)

    model = loading.load_model(args.model, args.device)
    fp16 = args.fp16
    if fp16 is None:
        fp16 == args.device == "cuda"
    if fp16:
        model = model.to(torch.float16)
    if args.script:
        model = torch.jit.script(model)

    server = grpc.aio.server()
    server.add_insecure_port(f"{args.host}:{args.port}")

    analysis = tak.model.server.Server(model=model, device=args.device)
    worker = asyncio.create_task(analysis.worker_loop())

    analysis_pb2_grpc.add_AnalysisServicer_to_server(
        analysis,
        server,
    )
    await server.start()

    async def server_graceful_shutdown():
        logging.info("Starting graceful shutdown...")
        # Shuts down the server with 5 seconds of grace period. During the
        # grace period, the server won't accept new connections and allow
        # existing RPCs to continue within the grace period.
        await server.stop(2)
        worker.cancel()

    _cleanup_coroutines.append(server_graceful_shutdown())

    await server.wait_for_termination()


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main(sys.argv[1:]))
    finally:
        for co in _cleanup_coroutines:
            loop.run_until_complete(co)
        loop.close()
